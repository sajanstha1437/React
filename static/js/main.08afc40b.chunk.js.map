{"version":3,"sources":["components/css/Cards.module.css","components/Cards.jsx","api/index.js","components/Chart.jsx","components/Country.jsx","App.js","index.js","App.module.css","components/css/Country.module.css","components/css/Chart.module.css","images/corona.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Country","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","choice","i","key","App","state","fetchedData","setState","this","src","coronaImage","image","alt","cards","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08afc40b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3Wgoj\",\"card\":\"Cards_card__ld2jc\",\"infected\":\"Cards_infected__2RC4C\",\"recovered\":\"Cards_recovered__25I30\",\"deaths\":\"Cards_deaths__1w-uf\"};","import React, { Component } from 'react'\r\nimport { Card, CardContent, Typography, Grid, StylesProvider } from '@material-ui/core';\r\nimport styles from './css/Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ( {data: { confirmed, recovered, deaths, lastUpdate } } ) => {\r\n\r\n    if(!confirmed){\r\n        return 'Loading...';\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n\r\n            <Grid container justify=\"center\">\r\n\r\n                <Grid item component = {Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >Infected</Typography>\r\n                        <Typography variant = \"h5\" >\r\n                            <CountUp start={0} end={ confirmed.value } duration = {2} separator = \",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" > {new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant =\"body2\" >Number of Active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n               \r\n                <Grid item component = {Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >Recovered</Typography>\r\n                        <Typography variant = \"h5\" >\r\n                            <CountUp start={0} end={ recovered.value } duration = {2} separator = \",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" > {new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant =\"body2\" >Number of Recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n\r\n                <Grid item component = {Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >Deaths</Typography>\r\n                        <Typography variant = \"h5\" >\r\n                            <CountUp start={0} end={ deaths.value } duration = {2} separator = \",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" > {new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant =\"body2\" >Number of Deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url=\"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableUrl);\r\n\r\n        /*\r\n        const modifiedData = {\r\n            confirmed: confirmed,\r\n            recovered: recovered,\r\n            deaths: deaths,\r\n            lastUpdate: lastUpdate,\r\n        }        \r\n        return modifiedData;\r\n        */\r\n        //Any of these two ways can be used to return the response.\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate};\r\n        \r\n    } catch (error) {\r\n\r\n        console.log(error);\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport const fetchDailyData = async()=>{\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData)=>({\r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate,\r\n        }));\r\n        return modifiedData;\r\n        \r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchCountries = async ()=>{\r\n    try {\r\n        const {data:{countries}}=await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country)=>country.name);\r\n        \r\n\r\n\r\n    } catch (error) {\r\n\r\n        console.log(error);\r\n        \r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './css/Chart.module.css';\r\n\r\nconst Chart = ({data:{ confirmed, recovered, deaths },country}) => {\r\n\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(()=>{       \r\n\r\n        const fetchAPI= async()=>{\r\n            //const dailyData = await fetchDailyData();\r\n            setDailyData(await fetchDailyData());\r\n            \r\n        }\r\n\r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\nconst lineChart = (\r\n    dailyData.length\r\n    ? (        //if we have th first line of the daily data then proceed to the step below\r\n        <Line \r\n    \r\n            data={{\r\n                labels:dailyData.map(({date})=>date),\r\n                datasets:[{\r\n                    data: dailyData.map(({confirmed})=>confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill:true,\r\n                    \r\n                }, {\r\n                    data: dailyData.map(({deaths})=>deaths),\r\n                    label: 'Deaths',\r\n                    borderColor:'red',\r\n                    backgroundColor: 'rgba(255,0,0,0.5)',\r\n                    fill:true,\r\n                }],\r\n            }}\r\n\r\n        />) : null                    // if we do not have daily data then show null.\r\n\r\n);\r\n\r\nconst barChart = (\r\n\r\n    confirmed \r\n    ?(\r\n        <Bar\r\n        \r\n            data = {{\r\n\r\n                labels : ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [{\r\n                    label :'People',\r\n                    backgroundColor:[\r\n                        'rgba(255,255,0,0.5)',\r\n                        'rgba(0,255,0,0.5)',\r\n                        'rgba(255,0,0,0.5)'\r\n                    ],\r\n                    data: [confirmed.value, recovered.value, deaths.value]\r\n                }]\r\n            }}\r\n            options = {{\r\n                legend : { display : false},\r\n                title : {display : true, text : `Current state in ${country}`}\r\n            }}\r\n        />\r\n    ) : null\r\n);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core'; \r\n\r\nimport styles from './css/Country.module.css';\r\nimport { fetchCountries } from '../api';\r\n\r\n\r\nconst Country = ({handleCountryChange}) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] =useState([]);\r\n    useEffect(()=>{\r\n        const fetchAPI = async()=>{\r\n            setFetchedCountries(await fetchCountries());\r\n\r\n        }\r\n        fetchAPI();\r\n    },[setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n                      \r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n                \r\n                <option className={styles.choice} value=\"\">Worldwide Graph/ Scroll to select country</option>\r\n                {fetchedCountries.map((country, i)=><option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    ); \r\n}\r\n\r\nexport default Country;","import React, { Component } from 'react'\r\n\r\nimport { Cards, Chart, Country } from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\nimport coronaImage from'./images/corona.png';\r\n\r\nclass App extends React.Component{\r\n\r\n    /* In order to display the data from ComponentDidMount to Cards We need to use state*/\r\n\r\n    state = {\r\n        data:{}, // Initially this data is empty until it is populated by the request inside ComponentDidMount\r\n        country:'',\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n\r\n        this.setState({data:fetchedData});\r\n        \r\n    }\r\n\r\n    handleCountryChange = async (country)=>{\r\n\r\n         //fetch data\r\n        const fetchedData = await fetchData(country);\r\n\r\n        //set the state\r\n        this.setState({ data: fetchedData, country: country});\r\n    }\r\n\r\n    render(){\r\n\r\n        const { data , country} = this.state;\r\n        return(\r\n\r\n            <div className={styles.container}>\r\n                \r\n                <img src={coronaImage} className={styles.image} alt=\"COVID-19\"/>\r\n                               \r\n                <Cards className={styles.cards} data = {data}/>\r\n                <Country handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data = {data} country = {country}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__MjZxN\",\"image\":\"App_image__PPsvZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Country_formControl__3iEUr\",\"choice\":\"Country_choice__3ycmd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__M65np\"};","module.exports = __webpack_public_path__ + \"static/media/corona.f6464bb9.png\";"],"sourceRoot":""}